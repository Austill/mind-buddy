/**
 * AI Services for Mind Buddy
 * 
 * This file provides TypeScript services for all AI features:
 * - Sentiment Analysis: Analyzes emotional tone of journal entries
 * - Chat (Sereni): Conversational AI assistant for mental wellness
 * - Insights: Personalized wellness tips and recommendations
 * 
 * All services use the authenticated API instance from authService
 */

import api from './authService';

// ==========================================
// TYPE DEFINITIONS
// ==========================================

/**
 * Sentiment scores returned by the AI model
 * Each score is between 0 and 1, representing confidence levels
 */
export interface SentimentScores {
  positive: number;   // 0-1: How positive the text is
  negative: number;   // 0-1: How negative the text is
  neutral: number;    // 0-1: How neutral the text is
}

/**
 * Complete sentiment analysis result
 * Includes the detected sentiment, scores, emotions, and crisis flags
 */
export interface SentimentResult {
  _id: string;
  user_id: string;
  journal_entry_id?: string;
  sentiment_label: 'positive' | 'negative' | 'neutral';  // Overall sentiment
  sentiment_scores: SentimentScores;                      // Detailed scores
  detected_emotions: string[];                            // e.g., ["happy", "excited"]
  crisis_flag: boolean;                                   // True if crisis keywords detected
  crisis_keywords?: string[];                             // Keywords that triggered crisis flag
  created_at: string;
  updated_at: string;
}

/**
 * Response from sentiment analysis endpoint
 * Includes both the sentiment result and any generated insights
 */
export interface AnalyzeSentimentResponse {
  sentiment: SentimentResult;
  insights: WellnessInsight[];  // Auto-generated insights based on sentiment
}

/**
 * Analysis of sentiment trends over time
 * Provides overview of emotional patterns and risk assessment
 */
export interface SentimentTrendAnalysis {
  overall_trend: 'improving' | 'declining' | 'stable' | 'fluctuating';
  average_sentiment: 'positive' | 'negative' | 'neutral';
  sentiment_distribution: {
    positive: number;   // Percentage of positive entries
    negative: number;   // Percentage of negative entries
    neutral: number;    // Percentage of neutral entries
  };
  risk_level: 'low' | 'moderate' | 'high' | 'critical';  // Mental health risk assessment
  recommendation: string;  // AI-generated recommendation based on trends
}

/**
 * A single chat message in a conversation
 */
export interface ChatMessage {
  _id: string;
  user_id: string;
  conversation_id: string;
  message: string;                      // The message content
  role: 'user' | 'assistant';          // Who sent the message
  ai_response?: string;                 // AI's response (if role is 'user')
  sentiment?: string;                   // Detected sentiment of message
  created_at: string;
}

/**
 * Response from sending a chat message
 * Includes the AI's response and metadata
 */
export interface ChatResponse {
  conversation_id: string;              // Unique conversation ID
  user_message: string;                 // Echo of user's message
  ai_response: string;                  // Sereni's response
  sentiment: string;                    // Detected sentiment
  source: string;                       // 'ai_model' or 'fallback'
  requires_professional_help: boolean;  // True if crisis detected
  chat_id: string;                      // ID of this chat message
}

/**
 * Wellness insight generated by the AI
 * Provides personalized tips and recommendations
 */
export interface WellnessInsight {
  _id: string;
  user_id: string;
  insight_type: 'daily_tip' | 'mood_pattern' | 'crisis_support' | 'wellness_recommendation';
  insight_text: string;          // Main insight message
  recommendation?: string;        // Specific recommendation
  activity_suggestion?: string;   // Suggested activity
  priority: 'low' | 'normal' | 'high' | 'urgent';  // How important this insight is
  is_read: boolean;              // Whether user has seen it
  is_dismissed: boolean;         // Whether user dismissed it
  based_on_sentiment?: string;   // What sentiment triggered this
  based_on_pattern?: string;     // What pattern triggered this
  created_at: string;
  updated_at: string;
  read_at?: string;
}

// ==========================================
// SENTIMENT ANALYSIS SERVICES
// ==========================================

/**
 * Analyze the sentiment of a text (usually journal entry)
 * 
 * @param text - The text to analyze
 * @param journalEntryId - Optional ID of the journal entry being analyzed
 * @returns Sentiment result and any auto-generated insights
 * 
 * @example
 * const result = await analyzeSentiment("I'm feeling really happy today!");
 * console.log(result.sentiment.sentiment_label); // "positive"
 * if (result.insights.length > 0) {
 *   console.log(result.insights[0].insight_text); // Wellness tip
 * }
 */
export const analyzeSentiment = async (
  text: string,
  journalEntryId?: string
): Promise<AnalyzeSentimentResponse> => {
  const response = await api.post('/sentiment/analyze', {
    text,
    journal_entry_id: journalEntryId,
  });
  return response.data;
};

/**
 * Get historical sentiment data for the current user
 * Useful for displaying mood history and patterns
 * 
 * @param limit - Maximum number of records to return (default: 30, max: 100)
 * @param days - Number of days to look back (default: 30, max: 365)
 * @returns Array of sentiment records and total count
 * 
 * @example
 * const history = await getSentimentHistory(10, 7); // Last 10 records from past week
 * history.history.forEach(sentiment => {
 *   console.log(`${sentiment.created_at}: ${sentiment.sentiment_label}`);
 * });
 */
export const getSentimentHistory = async (
  limit: number = 30,
  days: number = 30
): Promise<{ history: SentimentResult[]; count: number }> => {
  const response = await api.get('/sentiment/history', {
    params: { limit, days },
  });
  return response.data;
};

/**
 * Get sentiment trends and pattern analysis
 * Provides insights into how mood is changing over time
 * 
 * @param days - Number of days to analyze (default: 30, max: 365)
 * @returns Trend analysis, distribution, and pattern insights
 * 
 * @example
 * const trends = await getSentimentTrends(30);
 * console.log(`Your mood is ${trends.trend_analysis.overall_trend}`);
 * console.log(`Risk level: ${trends.trend_analysis.risk_level}`);
 * if (trends.pattern_insight) {
 *   showNotification(trends.pattern_insight.insight_text);
 * }
 */
export const getSentimentTrends = async (
  days: number = 30
): Promise<{
  trend_analysis: SentimentTrendAnalysis;
  sentiment_distribution: any;
  pattern_insight: WellnessInsight | null;
}> => {
  const response = await api.get('/sentiment/trends', {
    params: { days },
  });
  return response.data;
};

/**
 * Check for recent crisis flags
 * Important for monitoring mental health risk
 * 
 * @param days - Number of days to check (default: 7, max: 30)
 * @returns Whether crisis detected and details
 * 
 * @example
 * const crisisCheck = await checkCrisisFlags(7);
 * if (crisisCheck.has_crisis_flags) {
 *   showCrisisAlert(crisisCheck.recent_crises);
 * }
 */
export const checkCrisisFlags = async (
  days: number = 7
): Promise<{
  has_crisis_flags: boolean;
  crisis_count: number;
  recent_crises: SentimentResult[];
}> => {
  const response = await api.get('/sentiment/crisis-check', {
    params: { days },
  });
  return response.data;
};

// ==========================================
// CHAT SERVICES (Sereni AI Assistant)
// ==========================================

/**
 * Send a message to Sereni, the AI mental wellness assistant
 * 
 * @param message - The message to send
 * @param conversationId - Optional: ID of existing conversation to continue
 * @returns AI response and conversation metadata
 * 
 * @example
 * // Starting a new conversation
 * const response = await sendChatMessage("I'm feeling anxious today");
 * console.log(response.ai_response); // Sereni's empathetic response
 * const convId = response.conversation_id; // Save for next message
 * 
 * // Continuing a conversation
 * const followup = await sendChatMessage("Why do you think that is?", convId);
 */
export const sendChatMessage = async (
  message: string,
  conversationId?: string
): Promise<ChatResponse> => {
  const response = await api.post('/chat/message', {
    message,
    conversation_id: conversationId,
  });
  return response.data;
};

/**
 * Get list of recent conversations with Sereni
 * Each conversation is a separate chat session
 * 
 * @param limit - Maximum number of conversations (default: 10, max: 50)
 * @returns Array of conversation summaries
 * 
 * @example
 * const conversations = await getConversations(5);
 * // Display list of past conversations
 * conversations.conversations.forEach(conv => {
 *   console.log(`${conv.started_at}: ${conv.first_message}`);
 * });
 */
export const getConversations = async (
  limit: number = 10
): Promise<{ conversations: any[]; count: number }> => {
  const response = await api.get('/chat/conversations', {
    params: { limit },
  });
  return response.data;
};

/**
 * Get all messages in a specific conversation
 * Useful for displaying chat history when reopening a conversation
 * 
 * @param conversationId - The conversation to retrieve
 * @param limit - Maximum number of messages (default: 50, max: 100)
 * @returns All messages in chronological order
 * 
 * @example
 * const conversation = await getConversation(convId);
 * conversation.messages.forEach(msg => {
 *   if (msg.role === 'user') {
 *     console.log(`You: ${msg.message}`);
 *   } else {
 *     console.log(`Sereni: ${msg.ai_response}`);
 *   }
 * });
 */
export const getConversation = async (
  conversationId: string,
  limit: number = 50
): Promise<{ conversation_id: string; messages: ChatMessage[]; count: number }> => {
  const response = await api.get(`/chat/conversation/${conversationId}`, {
    params: { limit },
  });
  return response.data;
};

/**
 * Get all chat messages across all conversations
 * Useful for search or displaying complete chat history
 * 
 * @param limit - Maximum number of messages (default: 50, max: 200)
 * @returns All chat messages ordered by date
 */
export const getChatHistory = async (
  limit: number = 50
): Promise<{ history: ChatMessage[]; count: number }> => {
  const response = await api.get('/chat/history', {
    params: { limit },
  });
  return response.data;
};

/**
 * Get a proactive check-in message from Sereni
 * The message is personalized based on recent sentiment trends
 * Useful for starting conversations when user opens the app
 * 
 * @returns Personalized greeting/check-in message
 * 
 * @example
 * const checkIn = await getProactiveCheckIn();
 * // Display as notification or conversation starter
 * showNotification(checkIn.message);
 */
export const getProactiveCheckIn = async (): Promise<{
  message: string;
  type: string;
}> => {
  const response = await api.get('/chat/proactive-check-in');
  return response.data;
};

// ==========================================
// INSIGHTS SERVICES
// ==========================================

/**
 * Get wellness insights for the current user
 * Insights are personalized tips and recommendations
 * 
 * @param limit - Maximum number of insights (default: 10, max: 50)
 * @param unreadOnly - If true, only return unread insights
 * @returns Array of wellness insights
 * 
 * @example
 * // Get latest insights
 * const insights = await getInsights(5, false);
 * insights.insights.forEach(insight => {
 *   showInsightCard(insight);
 * });
 * 
 * // Get only unread insights (for notifications)
 * const unread = await getInsights(10, true);
 * if (unread.count > 0) {
 *   showBadge(unread.count);
 * }
 */
export const getInsights = async (
  limit: number = 10,
  unreadOnly: boolean = false
): Promise<{ insights: WellnessInsight[]; count: number }> => {
  const response = await api.get('/insights', {
    params: { limit, unread_only: unreadOnly },
  });
  return response.data;
};

/**
 * Get urgent/high priority insights
 * These require immediate attention (e.g., crisis support)
 * 
 * @returns Urgent insights and flag indicating if any exist
 * 
 * @example
 * const urgent = await getUrgentInsights();
 * if (urgent.has_urgent) {
 *   // Show prominent alert
 *   showUrgentAlert(urgent.urgent_insights[0]);
 * }
 */
export const getUrgentInsights = async (): Promise<{
  urgent_insights: WellnessInsight[];
  count: number;
  has_urgent: boolean;
}> => {
  const response = await api.get('/insights/urgent');
  return response.data;
};

/**
 * Get today's daily insight
 * Each day gets one personalized wellness tip
 * If one doesn't exist yet, it will be generated automatically
 * 
 * @returns Daily insight and flag indicating if it's newly generated
 * 
 * @example
 * const daily = await getDailyInsight();
 * if (daily.is_new) {
 *   // Show modal with new insight
 *   showDailyInsightModal(daily.insight);
 * } else {
 *   // Just display in dashboard
 *   displayInsight(daily.insight);
 * }
 */
export const getDailyInsight = async (): Promise<{
  insight: WellnessInsight;
  is_new: boolean;
}> => {
  const response = await api.get('/insights/daily');
  return response.data;
};

/**
 * Mark an insight as read
 * Updates the insight's read status and timestamp
 * 
 * @param insightId - The insight to mark as read
 * @returns Updated insight
 * 
 * @example
 * // When user views an insight
 * await markInsightRead(insight._id);
 */
export const markInsightRead = async (insightId: string): Promise<{
  message: string;
  insight: WellnessInsight;
}> => {
  const response = await api.put(`/insights/${insightId}/read`);
  return response.data;
};

/**
 * Dismiss an insight
 * User doesn't want to see this insight anymore
 * 
 * @param insightId - The insight to dismiss
 * @returns Updated insight
 * 
 * @example
 * // When user clicks "Dismiss" on an insight
 * await dismissInsight(insight._id);
 * removeInsightFromUI(insight._id);
 */
export const dismissInsight = async (insightId: string): Promise<{
  message: string;
  insight: WellnessInsight;
}> => {
  const response = await api.put(`/insights/${insightId}/dismiss`);
  return response.data;
};

/**
 * Manually generate a new insight
 * Useful when user wants a fresh recommendation or tip
 * 
 * @param type - Type of insight to generate
 * @returns Newly generated insight
 * 
 * @example
 * // User clicks "Get Wellness Tip"
 * const newInsight = await generateInsight('wellness_recommendation');
 * showInsightCard(newInsight.insight);
 * 
 * // After reviewing mood trends
 * const pattern = await generateInsight('mood_pattern');
 * showPatternAnalysis(pattern.insight);
 */
export const generateInsight = async (
  type: 'wellness_recommendation' | 'mood_pattern' = 'wellness_recommendation'
): Promise<{
  message: string;
  insight: WellnessInsight;
}> => {
  const response = await api.post('/insights/generate', { type });
  return response.data;
};
